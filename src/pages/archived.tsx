import { type NextPage } from "next";
import React from "react";
import { useUser } from "@clerk/nextjs";
import Head from "next/head";
import Card from "~/components/card";
import { LoadingPage } from "~/components/loading";
// import Link from "next/link";

import { api } from "~/utils/api";
import { Separator } from "~/components/ui/separator";
import { Button } from "~/components/ui/button";
// import { type RouterOutputs } from "../utils/api";
import Loading from "../components/loading/index";
import { toast } from "~/hooks/use-toast";

const Archived: NextPage = () => {
  const { user } = useUser();
  const ctx = api.useContext();

  const revalidate = async () => {
    await ctx.notes.invalidate();
  };

  if (!user) return <div>Please Sign In</div>;

  const { data, isLoading, isError } = api.notes.getUserArchive.useQuery(
    {
      userId: user.id,
    },
    { refetchOnWindowFocus: false }
  );

  const { mutate: ClearAll, isLoading: isClearing } =
    api.notes.deleteUserArchive.useMutation({
      onSuccess: () => {
        void revalidate();
        toast({
          title: "Cleared!",
          description: "All archived Notes Cleared",
          duration: 1200,
        });
      },
    });

  if (isLoading) return <LoadingPage />;
  if (!data || isError) return <div>Something Went Wrong</div>;

  return (
    <>
      <Head>
        <title>Archived Notes</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col gap-4 p-2 md:p-6">
        <div className="flex items-center justify-between">
          <div>Search</div>
          <Button
            disabled={isClearing || data.length === 0}
            onClick={() => ClearAll({ authorId: user.id })}
            className="flex items-center gap-2"
          >
            {isClearing && <Loading size={24} />}
            Clear All
          </Button>
        </div>
        <Separator />
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
          {data.map((note) => (
            <Card key={note.id} data={note} />
          ))}
          {data.length === 0 && <div>No Notes Found</div>}
        </div>
      </main>
    </>
  );
};

export default Archived;
